{
  parserClass='io.v.vdl.VdlParser'

  implements='io.v.vdl.psi.VdlCompositeElement'
  extends='io.v.vdl.psi.VdlCompositeElementImpl'

  elementTypeHolderClass='io.v.vdl.psi.VdlTypes'
  elementTypeClass='io.v.vdl.psi.VdlCompositeElementType'
  tokenTypeClass='io.v.vdl.psi.VdlTokenType'
  parserUtilClass='io.v.vdl.VdlParserUtil'

  psiClassPrefix='Vdl'
  psiImplClassSuffix='Impl'
  psiPackage='io.v.vdl.psi'
  psiImplPackage='io.v.vdl.psi.impl'
  psiImplUtilClass='io.v.vdl.psi.VdlPsiImplUtil'

  tokens=[
    LBRACE               =  '{'
    RBRACE               =  '}'
    LBRACK               =  '['
    RBRACK               =  ']'
    LPAREN               =  '('
    RPAREN               =  ')'
    COLON                =  ':'
    SEMICOLON            =  ';'
    COMMA                =  ','
    EQ                   =  '=='
    ASSIGN               =  '='
    NOT_EQ               =  '!='
    NOT                  =  '!'
    PLUS_PLUS            =  '++'
    PLUS_ASSIGN          =  '+='
    PLUS                 =  '+'
    MINUS_MINUS          =  '--'
    MINUS_ASSIGN         =  '-='
    MINUS                =  '-'
    COND_OR              =  '||'
    BIT_OR_ASSIGN        =  '|='
    BIT_CLEAR_ASSIGN     =  '&^='
    BIT_CLEAR            =  '&^'
    COND_AND             =  '&&'
    BIT_AND_ASSIGN       =  '&='
    BIT_AND              =  '&'
    BIT_OR               =  '|'
    SHIFT_LEFT_ASSIGN    =  '<<='
    SHIFT_LEFT           =  '<<'
    SEND_CHANNEL         =  '<-'
    LESS_OR_EQUAL        =  '<='
    LESS                 =  '<'
    BIT_XOR_ASSIGN       =  '^='
    BIT_XOR              =  '^'
    MUL_ASSIGN           =  '*='
    MUL                  =  '*'
    QUOTIENT_ASSIGN      =  '/='
    QUOTIENT             =  '/'
    REMAINDER_ASSIGN     =  '%='
    REMAINDER            =  '%'
    SHIFT_RIGHT_ASSIGN   =  '>>='
    SHIFT_RIGHT          =  '>>'
    GREATER_OR_EQUAL     =  '>='
    GREATER              =  '>'
    VAR_ASSIGN           =  ':='
    TRIPLE_DOT           =  '...'
    DOT                  =  '.'
    OPTIONAL_ARG         =  '?'
    SEMICOLON_SYNTHETIC  = '<NL>'
    TYPE_                = 'type'
    raw_string           = 'raw_string'
  ]

  extends("(Or|Add|Conversion|Mul|Selector)Expr")=BinaryExpr
  extends(".*(Expr|Literal|Lit|OperandName)")=Expression

  implements("(Type|Import|Method)Spec|MethodDeclaration")="io.v.vdl.psi.VdlNamedElement"
  extends("(Type|Import|Method)Spec|MethodDeclaration")="io.v.vdl.psi.VdlNamedElementImpl<?>"
  elementTypeFactory("(Type|Import|Method)Spec|MethodDeclaration")="io.v.vdl.psi.VdlStubElementTypeFactory.factory"

  pin(".*Statement")=1
  extends(".*Statement")=Statement
  extends(".*Type|TypeList")=Type

  pin('.*List(?:_\d.*)?')=1

  generateTokenAccessors=true
}

File ::= PackageClause semi ImportList TopLevelDeclaration* {pin(".*")=1}
ImportList ::= (ImportDeclaration semi)+|<<emptyImportList>>
private semi ::= '<NL>' | ';' | <<eof>>

PackageClause ::= package identifier {pin=1 methods=[getName]}

ImportDeclaration ::= import ( ImportSpec | '(' ImportSpecs? ')' ) {
  pin(".*")=1
}
private ImportSpecs ::= ImportSpec (semi ImportSpec)* semi? {pin=1}
ImportSpec ::= [ '.' | identifier ] ImportString {
    stubClass="io.v.vdl.psi.VdlImportSpecStub"
    methods=[getAlias isDot getPath getName]
}
ImportString ::= string | raw_string {
    methods=[getPath]
}

Type ::= TypeName | ErrorTypeName | TypeLit | ParType
ParType ::= '(' Type ')'
private TypeName ::= TypeReferenceExpression QualifiedTypeReferenceExpression?
    | ErrorTypeName
TypeReferenceExpression ::= '?'? identifier
left QualifiedTypeReferenceExpression ::= '.' identifier {elementType=TypeReferenceExpression}

ErrorTypeName ::= error

private TypeLit ::=
    ArrayOrSliceType
  | StructType
  | UnionType
  | EnumType
  | PointerType
  | FunctionType
  | InterfaceType
  | MapType
  | ChannelType

ArrayOrSliceType ::= '[' ('...'|Expression?) ']' Type {pin=1}

EnumType ::= enum '{' EnumFields? '}' {pin=1}
private EnumFields ::= EnumFieldDeclaration (semi EnumFieldDeclaration)* semi? {pin=1}
EnumFieldDeclaration ::= identifier

StructType ::= struct '{' Fields? '}' {pin=1}
UnionType ::= union '{' Fields? '}' {pin=1}
private Fields ::= FieldDeclaration (semi FieldDeclaration)* semi? {pin=1}
FieldDeclaration ::= (FieldDefinitionList Type | AnonymousFieldDefinition) Tag?
private FieldDefinitionList ::= FieldDefinition (',' FieldDefinition)*
FieldDefinition ::= identifier

AnonymousFieldDefinition ::= '*'? TypeName
Tag ::= StringLiteral

PointerType ::= '*' Type {pin=1}

FunctionType ::= func Signature {pin=1}
Signature ::= Parameters StreamSpec? Result
StreamSpec ::= stream StreamArgs {pin=1}
StreamArgs ::= '<' '>'
    | '<' Type '>'
    | '<' Type ',' Type '>'
Result ::= '(' TypeListNoPin ErrorResult? ')' | Type | ResultParameters
ErrorResult ::= '|' error
ResultParameters ::= '(' [ (ResultParameterList ','? | TypeListNoPin) ] ')'
private ResultParameterList ::= ParameterDeclaration (',' (ParameterDeclaration | &')'))* ErrorResult? {pin(".*")=1}
Parameters ::= '(' [ (ParameterList ','?| TypeListNoPin) ] ')'
private ParameterList ::= ParameterDeclaration (',' (ParameterDeclaration | &')'))* {pin(".*")=1}
ParameterDeclaration ::= ParamDefinitionListNoPin? '...'? Type | Type
private ParamDefinitionListNoPin ::= ParamDefinition &(!('.' | ')')) (',' ParamDefinition)* // todo
ParamDefinition ::= identifier


InterfaceType ::= interface '{' MethodSpecs? '}'
private MethodSpecs ::= MethodSpec (semi MethodSpec)* semi? {pin=1}
MethodSpec ::= TypeName &(!'(') | identifier Signature Tags? {
  stubClass="io.v.vdl.psi.VdlMethodSpecStub"
}

Tags ::= '{' ExpressionList '}' {pin=1}

MapType ::= map '[' Type ']' Type {
  pin=1
  methods = [
    keyType="Type[0]"
    valueType="Type[1]"
  ]
}
ChannelType ::= ChanTypePrefix Type {pin=1}
private ChanTypePrefix ::= chan '<-'? | '<-' chan {pin(".*")=1}

Block ::= <<consumeBlock>> | '{' ('}' | (<<withOff Statements "BLOCK?" "PAR">> | (!() Statements)) '}')
private Statements ::= StatementWithSemi*

private StatementWithSemi ::= Statement (semi|&'}') { pin=1 recoverWhile=StatementRecover }
Statement ::=
    ConstDeclaration
  | TypeDeclaration
  | VarDeclaration
  | LabeledStatement
  | SimpleStatement
  | GoStatement
  | ReturnStatement
  | BreakStatement
  | ContinueStatement
  | GotoStatement
  | FallthroughStatement
  | Block
  | IfStatement
  | SwitchStatement
  | SelectStatement
  | ForStatement
  | DeferStatement

private StatementRecover ::= !('!' | '!=' | '%' | '%=' | '&&' | '&' | '&=' | '&^' | '&^=' | '(' | '*' | '*=' | '+' | '++' | '+=' | '-' | '--' | '-=' | '...' | '/' | '/=' | ';' | '<' | '<-' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '[' | '^' | '^=' | 'type' | '{' | '|' | '|=' | '||' | '}' | break | case | chan | char | const | continue | decimali | default | defer | else | error | fallthrough | float | floati | for | func | go | goto | hex | identifier | if | int | interface | map | oct | return | select | string | raw_string | struct | switch | var)

SimpleStatement ::=
    ShortVarDeclaration
  | (LeftHandExprList (AssignmentStatement | SendStatement | ['++' | '--'])) {pin(".*")=LeftHandExprList}

private TopLevelDeclaration ::= OneOfDeclarations semi {pin=1 recoverWhile=TopLevelDeclarationRecover}
private OneOfDeclarations ::=
    ConstDeclaration
  | TypeDeclaration
  | VarDeclaration
  | FunctionDeclaration
  | MethodDeclaration
  | ErrorDeclaration
private TopLevelDeclarationRecover ::= !(';' |'type' | const | func | var | error)

ConstDeclaration ::= const ( ConstSpec | '(' ConstSpecs? ')' ) {pin(".*")=1}
private ConstSpecs ::= ConstSpec (semi ConstSpec)* semi? {pin=1}
ConstSpec ::= ConstDefinitionList [ ('=' ExpressionList | Type '=' ExpressionList) ] {
  pin(".*")=1
}
private ConstDefinitionList ::= ConstDefinition ( ',' ConstDefinition )*
ConstDefinition ::= identifier {
}

LeftHandExprList ::= ExpressionList
private ExpressionArgList ::= ExpressionOrTypeWithRecover2 (',' (ExpressionOrTypeWithRecover2 | &')'))* {pin(".*")=1}
private ExpressionOrTypeWithRecover2 ::= <<withOn "PAR" ExpressionOrTypeWithRecover>> | (!() ExpressionOrLiteralTypeExpr) {recoverWhile=ExpressionListRecover}
private ExpressionOrTypeWithRecover ::= ExpressionOrLiteralTypeExpr {recoverWhile=ExpressionListRecover}
private ExpressionOrLiteralTypeExpr ::= Expression | LiteralTypeExpr

private ExpressionList ::= ExpressionWithRecover (',' (ExpressionWithRecover | &')'))* {pin(".*")=1}
private ExpressionWithRecover ::= Expression {recoverWhile=ExpressionListRecover}
private ExpressionListRecover ::= !('!' | '!=' | '%' | '%=' | '&&' | '&' | '&=' | '&^' | '&^=' | '(' | ')' | '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '...' | '/' | '/=' | ':' | ';' | '<' | '<-' | '<<' | '<<=' | '<=' | '<NL>' | '=' | '==' | '>' | '>=' | '>>' | '>>=' | '[' | ']' | '^' | '^=' | 'type' | '{' | '|' | '|=' | '||' | '}' | break | case | chan | char | const | continue | decimali | default | defer | else | error | fallthrough | float | floati | for | func | go | goto | hex | identifier | if | int | interface | map | oct | return | select | string | raw_string | struct | switch | var)

TypeDeclaration ::= 'type' ( TypeSpec | '(' TypeSpecs? ')' ) {pin(".*")=1}
private TypeSpecs ::= TypeSpec (semi TypeSpec)* semi? {pin=1}
TypeSpec ::= SpecType {
  pin=1
  stubClass="io.v.vdl.psi.VdlTypeSpecStub"
  methods=[shouldGoDeeper identifier="SpecType/identifier"]

}
SpecType ::= identifier Type

VarDeclaration ::= var ( VarSpec | '(' VarSpecs? ')' ) {pin=1}
private VarSpecs ::= VarSpec (semi VarSpec)* semi? {pin=1}
VarSpec ::= VarDefinitionList ( Type [ '=' ExpressionList ] | '=' ExpressionList )
private VarDefinitionList ::= VarDefinition ( ',' VarDefinition )*
VarDefinition ::= identifier

ShortVarDeclaration ::= VarDefinitionList ':=' ExpressionList {pin=2 extends=VarSpec}

ErrorDeclaration ::= error ( ErrorSpec | '(' ErrorSpecs? ')' ) {pin=1}
private ErrorSpecs ::= ErrorSpec (semi ErrorSpec)* semi? {pin=1}
ErrorSpec ::= ErrorIdentifier Parameters '{' ErrorDetails '}'
ErrorIdentifier ::= identifier
private ErrorDetails ::= ErrorDetail (',' ErrorDetail)* ','? semi?
ErrorDetail ::= ActionIdentifier | ErrorLanguageSpec
ActionIdentifier ::= identifier
ErrorLanguageSpec ::= StringLiteral ':' StringLiteral

FunctionDeclaration ::= func identifier Signature Block? {
  pin=2
}
MethodDeclaration ::= func Receiver identifier Signature Block? {
  pin=2
  stubClass="io.v.vdl.psi.VdlMethodDeclarationStub"
}
Receiver ::= '(' (identifier ReceiverTail | ReceiverTail) ')' {
  pin=1
}
private ReceiverTail ::= '*'? ReceiverResultType ','?
ReceiverResultType ::= TypeReferenceExpression {elementType=Type}

Literal ::=
    int
  | float
  | floati
  | decimali
  | hex
  | oct
  | StringLiteral
  | char

StringLiteral ::= string | raw_string {
  implements = "com.intellij.psi.PsiLanguageInjectionHost"
  methods = [updateText createLiteralTextEscaper isValidHost]
}
OperandName ::= ReferenceExpression QualifiedReferenceExpression? {elementType=ReferenceExpression}

left QualifiedReferenceExpression ::= '.' identifier {elementType=ReferenceExpression}
ReferenceExpression ::= identifier {extends=Expression}

CompositeLit ::= (LiteralTypeExprInner LiteralValue) // the brackets are valuable
private LiteralTypeExprInner ::=
    StructType
  | ArrayOrSliceType
  | MapType
  | TypeName

LiteralTypeExpr ::= LiteralTypeExprInner

LiteralValue ::= (<<isModeOff "BLOCK?">> | <<isModeOn "PAR">> | <<prevIsArrayType>>) '{' ElementList? '}' {pin=2}
private ElementList  ::= E ( ',' E? )*
private E ::= <<withOn "PAR" Element>> | (!() Element) {recoverWhile=E_recover}
private E_recover ::= !('}'|',')
Element ::= First [':' Value]  {pin(".*")=1}
private First ::= Key | <<keyOrValueExpression>>
Key ::= (FieldName &':') | !() Expression // nullability hack for key without reference inside
FieldName ::= identifier
Value ::= Expression | LiteralValue

FunctionLit ::= func Signature Block {pin=1}

Expression ::=
    OrExpr
  | AndExpr
  | ConditionalExpr
  | AddExpr
  | MulExpr
  | UnaryExpr
  | ConversionExpr
  | MaxGroup
  | ParenthesesExpr

fake BinaryExpr ::= Expression+ {
  methods=[left="Expression[0]" right="Expression[1]"]
}

OrExpr ::= Expression '||' Expression
AndExpr ::= Expression '&&' Expression
UnaryExpr ::=  unary_op Expression
ConditionalExpr ::= Expression rel_op Expression
AddExpr ::= Expression add_op Expression
MulExpr ::= Expression mul_op Expression
ParenthesesExpr ::= '(' <<enterMode "PAR">> Expression <<exitModeSafe "PAR">>')' {pin=1}

BuiltinCallExpr ::= ReferenceExpression <<isBuiltin>> '(' [ BuiltinArgs ','? ] ')' {pin=3}
BuiltinArgs ::= Type [ ',' ExpressionList '...'? ] | ExpressionList '...'?

private MaxGroup ::=
    CompositeLit
  | OperandName
  | BuiltinCallExpr
  | CallExpr
  | TypeAssertionExpr
  | SelectorExpr
  | IndexOrSliceExpr
  | Literal
  | FunctionLit

private rel_op ::= '==' | '!=' | '<' | '<=' | '>' | '>='
private add_op ::= '+' | '-' | '|' | '^'
private mul_op ::= '*' | '/' | '%' | '<<' | '>>' | '&' | '&^'
private unary_op ::= '+' | '-' | '!' | '^' | '*' | '&' | '<-'

ReceiverType ::= TypeName | '(' '*' TypeName ')' | '(' ReceiverType ')'
SelectorExpr ::= Expression '.' !('(' 'type') Expression
IndexOrSliceExpr ::= Expression '[' <<enterMode "PAR">> (SliceExprBody | IndexExprBody) <<exitModeSafe "PAR">> ']' {pin=2}
private IndexExprBody ::= Expression SliceExprBodyInner?
private inner SliceExprBodyInner ::= SliceExprBody
private SliceExprBody ::= &':' (':' Expression ':' Expression) | (':' Expression?)
TypeAssertionExpr ::= Expression '.' '(' &(!'type') Type ')'
CallExpr ::= Expression ArgumentList
ArgumentList ::= '(' [ ExpressionArgList '...'? ','? ] ')' {pin=1}
ConversionExpr ::= &ConversionPredicate Type ConversionTail
private ConversionPredicate ::= ConversionStart | '(' ConversionStart
private ConversionTail ::= '(' Expression ','? ')' {pin=1}
private ConversionStart ::= '*' | '<-' | '[' | chan | func | interface | map | struct

LabeledStatement ::= LabelDefinition ':' Statement? {pin=2}
LabelDefinition ::= identifier
left SendStatement ::= '<-' Expression {pin=1}
left AssignmentStatement ::= assign_op ExpressionList {pin=1}
assign_op ::= '=' | '+=' | '-=' | '|=' | '^=' | '*=' | '/=' | '%=' | '<<=' | '>>=' | '&=' | '&^='
IfStatement ::= if Condition Block ElseStatement?
ElseStatement ::= else (IfStatement | Block)
SwitchStatement ::= SwitchStart (TypeSwitchStatement | ExprSwitchStatement)
SwitchStart ::= switch
left ExprSwitchStatement ::= Condition '{' ExprCaseClause* '}' {pin=2 extends=SwitchStatement}

private Condition ::= <<enterMode "BLOCK?">> SimpleStatementOpt Expression? <<exitModeSafe "BLOCK?">>
private SimpleStatementOpt ::= [SimpleStatement ';'?] // todo: remove ?

ExprCaseClause ::= !'}' ExprSwitchCase ':' Statements? {pin=1}
private ExprSwitchCase ::= case ExpressionList | default {pin(".*")=1}
left TypeSwitchStatement ::= (TypeSwitchGuard | SimpleStatement ';'? TypeSwitchGuard) '{' ( TypeCaseClause )* '}' {pin=1 extends=SwitchStatement}
TypeSwitchGuard ::= [ VarDefinition ':=' ] Expression '.' TypeGuard
TypeGuard ::= '(' 'type' ')' {pin=2}
TypeCaseClause ::= !'}' TypeSwitchCase ':' Statements? {pin=1}
private TypeSwitchCase ::= case TypeList | default {pin(".*")=1}
TypeList ::= Type ( ',' Type )*
TypeListNoPin ::= Type ( ',' Type )* {elementType=TypeList}
ForStatement ::= for <<enterMode "BLOCK?">> (ForOrRangeClause Block | Block | Expression Block) <<exitModeSafe "BLOCK?">> {pin(".*")="for|ForOrRangeClause"}
private ForOrRangeClause ::= (ForClause | RangeClause)
ForClause ::= SimpleStatement? ';' Expression? ';' SimpleStatement?
RangeClause ::= ExpressionsOrVariables? range Expression {pin=2 extends=VarSpec}
private ExpressionsOrVariables ::= ExpressionList '=' | VarDefinitionList ':='
GoStatement ::= go Expression
SelectStatement ::= select '{' CommClause* '}'
CommClause ::= CommCase ':' Statements? {pin=1}
CommCase ::= case ( Expression SendStatement | RecvStatement ) | default {pin(".*")="case"}
RecvStatement ::= ExpressionsOrVariables? Expression {pin=0 extends=VarSpec}
ReturnStatement ::= return ExpressionList?
LabelRef ::= identifier
BreakStatement ::= break LabelRef?
ContinueStatement ::= continue LabelRef?
GotoStatement ::= goto LabelRef
FallthroughStatement ::= fallthrough
DeferStatement ::= defer Expression
